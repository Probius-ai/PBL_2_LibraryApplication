import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  BookOpen, 
  UserPlus, 
  BookPlus, 
  ListChecks, 
  ShoppingCart, 
  RefreshCcw 
} from 'lucide-react';

const LibraryManagementSystem = () => {
  // State for managing different sections
  const [activeSection, setActiveSection] = useState('newUser');
  
  // State for form inputs
  const [newBorrower, setNewBorrower] = useState({
    name: '',
    ID: ''
  });

  const [newBook, setNewBook] = useState({
    title: '',
    author: '',
    isbn: ''
  });

  // Mock data states
  const [Borrower, setBorrower] = useState([]);
  const [books, setBooks] = useState([]);
  const [LoanedBooks, setLoanedBooks] = useState([]);

  // Event Handlers
  const handleNewUserSubmit = (e) => {
    e.preventDefault();
    setBorrower([...Borrower, { ...newBorrower, id: Date.now() }]);
    setNewBorrower({ name: '', ID: ' ' });
  };

  const handleNewBookSubmit = (e) => {
    e.preventDefault();
    setBooks([...books, { ...newBook, id: Date.now() }]);
    setNewBook({ title: '', author: '', isbn: ''});
  };

  const renderSection = () => {
    switch(activeSection) {
      case 'newBorrower':
        return (
          <Card className="w-[400px]">
            <CardHeader>
              <CardTitle>신규 이용자 등록</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleNewUserSubmit} className="space-y-4">
                <div>
                  <Label>이름</Label>
                  <Input 
                    value={newUser.name} 
                    onChange={(e) => setNewUser({...newUser, name: e.target.value})}
                    placeholder="이름을 입력하세요" 
                  />
                </div>
                <div>
                  <Label>이메일</Label>
                  <Input 
                    value={newBorrower.ID} 
                    onChange={(e) => setNewBorrower({...newBorrower, iD: e.target.value})}
                    placeholder="학번을 입력하세요" 
                  />
                </div>
                <Button type="submit" className="w-full">등록</Button>
              </form>
            </CardContent>
          </Card>
        );
      
      case 'newBook':
        return (
          <Card className="w-[400px]">
            <CardHeader>
              <CardTitle>신규 서적 등록</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleNewBookSubmit} className="space-y-4">
                <div>
                  <Label>제목</Label>
                  <Input 
                    value={newBook.title} 
                    onChange={(e) => setNewBook({...newBook, title: e.target.value})}
                    placeholder="책 제목을 입력하세요" 
                  />
                </div>
                <div>
                  <Label>저자</Label>
                  <Input 
                    value={newBook.author} 
                    onChange={(e) => setNewBook({...newBook, author: e.target.value})}
                    placeholder="저자를 입력하세요" 
                  />
                </div>
                <div>
                  <Label>ISBN</Label>
                  <Input 
                    value={newBook.isbn} 
                    onChange={(e) => setNewBook({...newBook, isbn: e.target.value})}
                    placeholder="ISBN을 입력하세요" 
                  />
                </div>
                <div>
                </div>
                <Button type="submit" className="w-full">등록</Button>
              </form>
            </CardContent>
          </Card>
        );

      case 'availableBooks':
        return (
          <Card className="w-[500px]">
            <CardHeader>
              <CardTitle>대출 가능한 서적 목록</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {books.map(book => (
                  <div key={book.id} className="flex justify-between items-center p-2 border rounded">
                    <div>
                      <div className="font-bold">{book.title}</div>
                      <div className="text-sm">{book.author}</div>
                    </div>
                    <Button size="sm">대출</Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        );

      case 'LoanedBooks':
        return (
          <Card className="w-[500px]">
            <CardHeader>
              <CardTitle>대출중인 서적 목록</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {LoanedBooks.map(book => (
                  <div key={book.id} className="flex justify-between items-center p-2 border rounded">
                    <div>
                      <div className="font-bold">{book.title}</div>
                      <div className="text-sm">{book.author}</div>
                    </div>
                    <Button size="sm" variant="secondary">반납</Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        );

      default:
        return null;
    }
  };

  return (
    <div className="flex">
      <div className="w-[200px] p-4 bg-gray-100 h-screen">
        <div className="space-y-2">
          <Button 
            variant={activeSection === 'newBorrower' ? 'default' : 'outline'} 
            className="w-full justify-start" 
            onClick={() => setActiveSection('newBorrower')}
          >
            <UserPlus className="mr-2 h-4 w-4" /> 신규이용자 등록
          </Button>
          <Button 
            variant={activeSection === 'newBook' ? 'default' : 'outline'} 
            className="w-full justify-start" 
            onClick={() => setActiveSection('newBook')}
          >
            <BookPlus className="mr-2 h-4 w-4" /> 신규서적 등록
          </Button>
          <Button 
            variant={activeSection === 'availableBooks' ? 'default' : 'outline'} 
            className="w-full justify-start" 
            onClick={() => setActiveSection('availableBooks')}
          >
            <ListChecks className="mr-2 h-4 w-4" /> 대출가능한 서적
          </Button>
          <Button 
            variant={activeSection === 'LoanedBooks' ? 'default' : 'outline'} 
            className="w-full justify-start" 
            onClick={() => setActiveSection('LoanedBooks')}
          >
            <ShoppingCart className="mr-2 h-4 w-4" /> 대출중인 서적
          </Button>
        </div>
      </div>
      <div className="flex-1 p-8 bg-gray-50 flex items-center justify-center">
        {renderSection()}
      </div>
    </div>
  );
};

export default LibraryManagementSystem;
Last edited just now


Publish
