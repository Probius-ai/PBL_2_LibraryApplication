import java.time.LocalDate;
import java.util.*;

// Book 클래스
class Book {
    private String author;
    private String catalogueNumber;
    private boolean isAvailable;
    private String title;

    public Book(String title, String author, String catalogueNumber) {
        this.title = title;
        this.author = author;
        this.catalogueNumber = catalogueNumber;
        this.isAvailable = true;
    }

    public String getAuthor() {
        return author;
    }

    public String getCatalogueNumber() {
        return catalogueNumber;
    }

    public String getTitle() {
        return title;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Book)) return false;
        Book book = (Book) obj;
        return Objects.equals(catalogueNumber, book.catalogueNumber);
    }

    @Override
    public String toString() {
        return "Book{" +
                "title='" + title + '\'' +
                ", author='" + author + '\'' +
                ", catalogueNumber='" + catalogueNumber + '\'' +
                ", isAvailable=" + isAvailable +
                '}';
    }
}

// Borrower 클래스
class Borrower {
    private String name;

    public Borrower(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Borrower)) return false;
        Borrower borrower = (Borrower) obj;
        return Objects.equals(name, borrower.name);
    }

    @Override
    public String toString() {
        return "Borrower{name='" + name + "'}";
    }
}

// Loan 클래스
class Loan {
    private LocalDate loanDate;
    private Book book;
    private Borrower borrower;

    public Loan(Book book, Borrower borrower) {
        this.book = book;
        this.borrower = borrower;
        this.loanDate = LocalDate.now();
    }

    public Book getBook() {
        return book;
    }

    public Borrower getBorrower() {
        return borrower;
    }

    public LocalDate getLoanDate() {
        return loanDate;
    }

    @Override
    public String toString() {
        return "Loan{" +
                "book=" + book +
                ", borrower=" + borrower +
                ", loanDate=" + loanDate +
                '}';
    }
}

// Library 클래스
class Library {
    private Set<Book> books;
    private Set<Borrower> borrowers;
    private List<Loan> loans;

    public Library() {
        this.books = new HashSet<>();
        this.borrowers = new HashSet<>();
        this.loans = new ArrayList<>();
    }

    public boolean addBook(Book book) {
        return books.add(book);
    }

    public boolean addBorrower(Borrower borrower) {
        return borrowers.add(borrower);
    }

    public void addLoan(Loan loan) {
        loans.add(loan);
        loan.getBook().setAvailable(false);
    }

    public Book findBook(String title) {
        return books.stream()
                .filter(book -> book.getTitle().equals(title))
                .findFirst()
                .orElse(null);
    }

    public Borrower findBorrower(String name) {
        return borrowers.stream()
                .filter(borrower -> borrower.getName().equals(name))
                .findFirst()
                .orElse(null);
    }

    public Set<Book> getBooks() {
        return new HashSet<>(books);
    }

    public List<Loan> getLoans() {
        return new ArrayList<>(loans);
    }

    public void removeLoan(Loan loan) {
        loans.remove(loan);
        loan.getBook().setAvailable(true);
    }
}

// BookRegistrationService 클래스
class BookRegistrationService {
    private final Library library;

    public BookRegistrationService(Library library) {
        this.library = library;
    }

    public boolean addBook(String title, String author, String catalogueNumber) {
        if (isValidBookInfo(title, author, catalogueNumber)) {
            Book book = new Book(title, author, catalogueNumber);
            return library.addBook(book);
        }
        return false;
    }

    private boolean isValidBookInfo(String title, String author, String catalogueNumber) {
        return title != null && !title.trim().isEmpty() &&
                author != null && !author.trim().isEmpty() &&
                catalogueNumber != null && !catalogueNumber.trim().isEmpty();
    }
}

// BorrowerRegistrationService 클래스
class BorrowerRegistrationService {
    private final Library library;

    public BorrowerRegistrationService(Library library) {
        this.library = library;
    }

    public boolean registerBorrower(String name) {
        if (isValidName(name)) {
            Borrower borrower = new Borrower(name);
            return library.addBorrower(borrower);
        }
        return false;
    }

    private boolean isValidName(String name) {
        return name != null && !name.trim().isEmpty();
    }
}

// BookLoanService 클래스
class BookLoanService {
    private final Library library;

    public BookLoanService(Library library) {
        this.library = library;
    }

    public boolean loanBook(String title, String borrowerName) {
        Book book = library.findBook(title);
        Borrower borrower = library.findBorrower(borrowerName);

        if (book != null && borrower != null && book.isAvailable()) {
            Loan loan = new Loan(book, borrower);
            library.addLoan(loan);
            return true;
        }
        return false;
    }
}

// BookReturnService 클래스
class BookReturnService {
    private final Library library;

    public BookReturnService(Library library) {
        this.library = library;
    }

    public boolean returnBook(String title, String borrowerName) {
        Loan loanToReturn = library.getLoans().stream()
                .filter(loan -> loan.getBook().getTitle().equals(title) &&
                        loan.getBorrower().getName().equals(borrowerName))
                .findFirst()
                .orElse(null);

        if (loanToReturn != null) {
            library.removeLoan(loanToReturn);
            return true;
        }
        return false;
    }
}

// 메인 클래스 - 테스트용
class LibraryManagementSystem {
    public static void main(String[] args) {
        // 도서관 시스템 초기화
        Library library = new Library();
        BookRegistrationService bookRegistrationService = new BookRegistrationService(library);
        BorrowerRegistrationService borrowerRegistrationService = new BorrowerRegistrationService(library);
        BookLoanService bookLoanService = new BookLoanService(library);
        BookReturnService bookReturnService = new BookReturnService(library);

        // 도서 등록
        bookRegistrationService.addBook("Java Programming", "John Doe", "JAVA001");
        bookRegistrationService.addBook("Python Basics", "Jane Smith", "PY001");

        // 회원 등록
        borrowerRegistrationService.registerBorrower("Alice");
        borrowerRegistrationService.registerBorrower("Bob");

        // 도서 대출
        boolean loanResult = bookLoanService.loanBook("Java Programming", "Alice");
        System.out.println("Loan result: " + loanResult);

        // 도서 반납
        boolean returnResult = bookReturnService.returnBook("Java Programming", "Alice");
        System.out.println("Return result: " + returnResult);
    }
}